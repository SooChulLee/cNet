<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ include file="/common/common.jsp" %>
<%@ include file="/common/function.jsp" %>
<%@ page import="java.net.URL"%>
<%@ page import="java.net.HttpURLConnection"%>
<%@ page import="java.io.*"%>
<%@ page import="wfm.com.util.AES256Cipher"%>
<%
	// DB Connection Object
	Db db = null;

	//
	HttpURLConnection httpconn = null;
	InputStream in = null;
	ByteArrayOutputStream baos = null;
	BufferedReader rd = null;
	BufferedOutputStream os = null;

	try {
		// DB Connection
		db = new Db(true);

		// get parameter
		String rec_datm = CommonUtil.ifNull(request.getParameter("rec_datm"));
		String rec_filename = CommonUtil.ifNull(request.getParameter("rec_keycode2"));
		String user_id = CommonUtil.ifNull(request.getParameter("user_id"));
		String user_name = CommonUtil.ifNull(request.getParameter("user_nm"));
		String user_ip = CommonUtil.ifNull(request.getParameter("user_ip"));
		String reason_code = CommonUtil.ifNull(request.getParameter("reason_code"));
		String reason_text = CommonUtil.ifNull(request.getParameter("reason_text"));

		// 파라미터 체크
		if(!CommonUtil.hasText(rec_datm) || !CommonUtil.hasText(rec_filename) || !CommonUtil.hasText(reason_code)) {
			out.print("ERR" + CommonUtil.getErrorMsg("NO_PARAM"));
			return;
		}
		if("99".equals(reason_code) && !CommonUtil.hasText(reason_text)) {
			out.print("ERR" + CommonUtil.getErrorMsg("NO_PARAM"));
			return;
		}
		if(!CommonUtil.hasText(user_id) || !CommonUtil.hasText(user_name) || !CommonUtil.hasText(user_ip)) {
			out.print("ERR" + CommonUtil.getErrorMsg("NO_PARAM"));
			return;
		}

		// parameter decrypt
		AES256Cipher a256 = AES256Cipher.getInstance(CommonUtil.getWfmEncKey());

		String dec_rec_datm = a256.decrypt(rec_datm);
		String dec_rec_filename = a256.decrypt(rec_filename) + ".wav";
		String dec_user_id = a256.decrypt(user_id);
		String dec_user_name = a256.decrypt(user_name);
		String dec_user_ip = a256.decrypt(user_ip);
		String dec_reason_code = a256.decrypt(reason_code);
		String dec_reason_text = (CommonUtil.hasText(reason_text)) ? a256.decrypt(reason_text) : "";

		//
		Map<String, Object> argMap = new HashMap<String, Object>();

		// yyyyMMddHHmmssSSS -> yyyy-MM-dd HH:mm:ss.SSS
		//dec_rec_datm = DateUtil.getDateFormatByIntVal(dec_rec_datm, "yyyy-MM-dd HH:mm:ss");

		//
		argMap.clear();
		argMap.put("dateStr", CommonUtil.getRecordTableNm(dec_rec_datm));
		argMap.put("rec_date",dec_rec_datm);
		argMap.put("rec_filename",dec_rec_filename);

		// 녹취이력 조회
		Map<String, Object> data  = db.selectOne("rec_search.selectItem", argMap);
		if(data==null) {
			//out.print("ERR" + CommonUtil.getErrorMsg("NO_DATA"));
			  out.print("요청하신 녹취파일이 존재하지 않습니다.");
			return;
		}

		// 녹취파일 경로 조회
		String file_url = getListenURL("PCM", data, logger);

		if(file_url==null || "".equals(file_url)) {
			out.print("ERR" + "녹취파일 경로를 가져 오는데 실패했습니다.");
			return;
		}

		if("ERR".equals(file_url.substring(0,3))) {
			out.print("ERR" + file_url.substring(3));
			return;
		}

		// 녹취파일 HTTP 연결
		URL url = new URL(file_url);

		httpconn = (HttpURLConnection) url.openConnection();
		httpconn.setConnectTimeout(10000);
		//timeout으로 인한 주석 처리
		//httpconn.setReadTimeout(60000);

		if(httpconn.getResponseCode()!=HttpURLConnection.HTTP_OK) {
			out.print("ERR" + "녹취파일이 존재하지 않습니다.");
			return;
		}

		String contentType = httpconn.getContentType();
		int contentLength = httpconn.getContentLength();

		in = httpconn.getInputStream();
		baos = new ByteArrayOutputStream();

		// 미디어 서버 연동 결과 저장
		byte[] buffer = new byte[4096];
		int leng = 0;
		while((leng=in.read(buffer))!=-1) {
			baos.write(buffer, 0, leng);
		}
		baos.flush();

		// 미디어 서버 오류 체크
		rd = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(baos.toByteArray())));
		//logger.debug("rd="+rd.readLine());

		if("<H2>".equals(rd.readLine().substring(0,4))) {
			out.print("ERR" + "미디어서버 오류가 발생하였습니다.");
			return;
		}

		response.reset();
		response.setContentType(contentType);
		response.setHeader("Content-Description","Generated By CREC");
		response.setHeader("Content-Disposition","attachment; filename = " + new String(data.get("rec_filename").toString().getBytes("UTF-8"),"8859_1"));
		response.setHeader("Content-Length",""+contentLength);
		response.setHeader("Pragma","no-cache");
		response.setHeader("Expires","0");
		response.setHeader("Cache-Control","max-age=0");

		// getOutputStream error block
		out.clear();
		out=pageContext.pushBody();

		// file write
		os = new BufferedOutputStream(response.getOutputStream());
		os.write(baos.toByteArray());

		// resource close
		os.close();
		rd.close();
		baos.close();
		in.close();
		httpconn.disconnect();

		// 다운로드 이력 저장
		argMap.put("login_id",dec_user_id);
		argMap.put("login_name",dec_user_name);
		argMap.put("rec_datm",data.get("rec_datm").toString());
		argMap.put("local_no",data.get("local_no").toString());
		argMap.put("rec_filename",data.get("rec_filename").toString());
		argMap.put("down_ip",dec_user_ip);
		argMap.put("rec_keycode",data.get("rec_keycode").toString());
		argMap.put("user_id",data.get("user_id").toString());
		argMap.put("user_name",data.get("user_name").toString());
		argMap.put("reason_code",dec_reason_code);
		argMap.put("reason_text",dec_reason_text);
		argMap.put("down_src","AP");

		int ins_cnt = db.insert("hist_down.insertDownHist", argMap);
	} catch(Exception e) {
		out.print("ERR" + e.getMessage());
		logger.error(e.getMessage());
	} finally {
		if(httpconn!=null) httpconn.disconnect();
		if(in!=null) in.close();
		if(baos!=null) baos.close();
		if(rd!=null) rd.close();
		if(os!=null) os.close();
		if(db!=null) db.close();
	}
%>