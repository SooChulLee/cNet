<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ include file="/common/common.jsp" %>
<%@ include file="/common/function.jsp" %>
<%@ page import="java.net.URL"%>
<%@ page import="java.net.HttpURLConnection"%>
<%@ page import="java.io.*"%>
<%@ page import="wfm.com.util.AES256Cipher"%>
<%
	// DB Connection Object
	Db db = null;

	//
	HttpURLConnection httpconn = null;
	InputStream in = null;
	ByteArrayOutputStream baos = null;
	BufferedReader rd = null;
	BufferedOutputStream os = null;

	try {
		// DB Connection
		db = new Db(true);

				String info = CommonUtil.ifNull(request.getParameter("info"));
		int rec_seq = CommonUtil.getParameterInt("rec_seq", "-1");

		// 파라미터 체크
		if(!CommonUtil.hasText(info)) {
			out.print(CommonUtil.getPopupMsg(CommonUtil.getErrorMsg("NO_PARAM"),"","close"));
			return;
		}

		// 파라미터 복호화
		//CNCrypto aes = new CNCrypto("AES",CommonUtil.getOZEncKey());
		//info = aes.Decrypt(info);

		// 요청시간|녹취일시|내선번호|CON ID|상담사ID
		String tmp_arr[] = info.split("\\|");

		String started = tmp_arr[1];
		//String station = tmp_arr[2];
		String ucid = tmp_arr[2];
		String user_id = tmp_arr[3];




		// 파라미터 복호화된 데이터 체크
		//if(!CommonUtil.hasText(started) || !CommonUtil.hasText(station) || !CommonUtil.hasText(ucid)) {
           if(!CommonUtil.hasText(started) || !CommonUtil.hasText(ucid)) {
			out.print(CommonUtil.getPopupMsg(CommonUtil.getErrorMsg("NO_PARAM"),"","close"));
			return;
		}

		// 요청시간 비교
		Date req_datm = DateUtil.getDate(DateUtil.getDateFormatByIntVal(tmp_arr[0], "yyyy-MM-dd HH:mm:ss"), "yyyy-MM-dd HH:mm:ss");
		Date now_datm = DateUtil.getDate(DateUtil.getToday("yyyy-MM-dd HH:mm:ss"), "yyyy-MM-dd HH:mm:ss");

		// 경과시간 체크
		// date diff
		int min = DateUtil.getDateDiff(req_datm, now_datm, "M");

		if(min>5) {
			out.print(CommonUtil.getPopupMsg("요청시간이 초과하였습니다.","","close"));
			return;
		}

		//
		String date = started.substring(0,8);

		Map<String, Object> argMap = new HashMap<String, Object>();
		Map<String, Object> curdata = new HashMap();

		//
		argMap.clear();




		argMap.put("rec_date",date);
		argMap.put("rec_keycode",ucid);

		// 녹취이력 조회
		Map<String, Object> data  = db.selectOne("rec_search.selectItem", argMap);
		if(data==null) {
			//out.print("ERR" + CommonUtil.getErrorMsg("NO_DATA"));
			  out.print("요청하신 녹취파일이 존재하지 않습니다.");
			return;
		}

		// 녹취파일 경로 조회
		String file_url = getListenURL("PCM", data, logger);

		if(file_url==null || "".equals(file_url)) {
			out.print("ERR" + "녹취파일 경로를 가져 오는데 실패했습니다.");
			return;
		}

		if("ERR".equals(file_url.substring(0,3))) {
			out.print("ERR" + file_url.substring(3));
			return;
		}

		// 녹취파일 HTTP 연결
		URL url = new URL(file_url);

		httpconn = (HttpURLConnection) url.openConnection();
		httpconn.setConnectTimeout(10000);
		//timeout으로 인한 주석 처리
		//httpconn.setReadTimeout(60000);

		if(httpconn.getResponseCode()!=HttpURLConnection.HTTP_OK) {
			out.print("ERR" + "녹취파일이 존재하지 않습니다.");
			return;
		}

		String contentType = httpconn.getContentType();
		int contentLength = httpconn.getContentLength();

		in = httpconn.getInputStream();
		baos = new ByteArrayOutputStream();

		// 미디어 서버 연동 결과 저장
		byte[] buffer = new byte[4096];
		int leng = 0;
		while((leng=in.read(buffer))!=-1) {
			baos.write(buffer, 0, leng);
		}
		baos.flush();

		// 미디어 서버 오류 체크
		rd = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(baos.toByteArray())));
		//logger.debug("rd="+rd.readLine());

		if("<H2>".equals(rd.readLine().substring(0,4))) {
			out.print("ERR" + "미디어서버 오류가 발생하였습니다.");
			return;
		}

		response.reset();
		response.setContentType(contentType);
		response.setHeader("Content-Description","Generated By CREC");
		response.setHeader("Content-Disposition","attachment; filename = " + new String(data.get("rec_filename").toString().getBytes("UTF-8"),"8859_1"));
		response.setHeader("Content-Length",""+contentLength);
		response.setHeader("Pragma","no-cache");
		response.setHeader("Expires","0");
		response.setHeader("Cache-Control","max-age=0");

		// getOutputStream error block
		out.clear();
		out=pageContext.pushBody();

		// file write
		os = new BufferedOutputStream(response.getOutputStream());
		os.write(baos.toByteArray());

		// resource close
		os.close();
		rd.close();
		baos.close();
		in.close();
		httpconn.disconnect();


	} catch(Exception e) {
		out.print("ERR" + e.getMessage());
		logger.error(e.getMessage());
	} finally {
		if(httpconn!=null) httpconn.disconnect();
		if(in!=null) in.close();
		if(baos!=null) baos.close();
		if(rd!=null) rd.close();
		if(os!=null) os.close();
		if(db!=null) db.close();
	}
%>